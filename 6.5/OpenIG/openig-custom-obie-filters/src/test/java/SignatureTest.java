
/***************************************************************************
 *  Copyright 2019 ForgeRock AS
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ***************************************************************************/

import java.io.ByteArrayInputStream;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.Provider;
import java.security.Provider.Service;
import java.security.Security;
import java.security.Signature;
import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.spec.MGF1ParameterSpec;
import java.security.spec.PSSParameterSpec;
import java.util.TreeSet;

import org.apache.commons.codec.binary.Base64;
import org.forgerock.json.jose.jws.JwsAlgorithm;

/**
 * Simple JWT processor. This is specially written for JWT generated by WSO2IS
 */
public class SignatureTest {
	public enum Algorithms {
		RS256("SHA256withRSA"),
		RS384("SHA384WithRSA"),
		RS512("SHA512WithRSA"),
		PS256("SHA256WithRSAAndMGF1"),
		PS384("SHA384WithRSAAndMGF1"),
		PS512("SHA512WithRSAAndMGF1"),
		HS256("HmacSHA256"),
		HS384("HmacSHA384"),
		HS512("HmacSHA512"),
		ES256("SHA256WithECDSA"),
		ES384("SHA384WithECDSA"),
		ES512("SHA512WithECDSA"),
		EdDSA("SHA512WithEdDSA");

		private final String algorithm;

		Algorithms(final String algorithm) {
			this.algorithm = algorithm;
		}

		public String toString() {
			return algorithm;
		}

	}

	private static final Base64 base64Url = new Base64(true);

	// Header+Payload
	private static String jwtAssertion = "eyJraWQiOiI2OGIzYTY4NzkyNWFiYTY5ZmZmZjg2ZTFmNzMwYzcxMmMwY2M5NmI2IiwiYWxnIjoiUFMyNTYifQ.eyJ0b2tlbl9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnIjoiUlMyNTYiLCJyZXF1ZXN0X29iamVjdF9lbmNyeXB0aW9uX2FsZyI6IlJTQS1PQUVQLTI1NiIsImdyYW50X3R5cGVzIjpbImF1dGhvcml6YXRpb25fY29kZSIsInJlZnJlc2hfdG9rZW4iLCJjbGllbnRfY3JlZGVudGlhbHMiXSwiaXNzIjoiNWM5MzYzYzQwM2YwZGYwMDFkM2EyZDY5IiwicmVkaXJlY3RfdXJpcyI6WyJodHRwczpcL1wvd3d3Lmdvb2dsZS5jb20iXSwidG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2QiOiJwcml2YXRlX2tleV9qd3QiLCJzb2Z0d2FyZV9zdGF0ZW1lbnQiOiJleUpyYVdRaU9pSXdZVE5sTkdKaFl6Vm1NVGcyT1RGbE5UY3hOR0prTmpNMlpXWTRZemhqWVdJMk1tSmxZMlEzSWl3aVlXeG5Jam9pVUZNeU5UWWlmUS5leUp2Y21kZmFuZHJjMTlsYm1Sd2IybHVkQ0k2SWxSUFJFOGlMQ0p6YjJaMGQyRnlaVjl0YjJSbElqb2lWRVZUVkNJc0luTnZablIzWVhKbFgzSmxaR2x5WldOMFgzVnlhWE1pT2xzaWFIUjBjSE02WEM5Y0wzZDNkeTVuYjI5bmJHVXVZMjl0SWwwc0ltOXlaMTl6ZEdGMGRYTWlPaUpCWTNScGRtVWlMQ0p6YjJaMGQyRnlaVjlqYkdsbGJuUmZhV1FpT2lJMVl6a3pOak5qTkRBelpqQmtaakF3TVdRellUSmtOamtpTENKcGMzTWlPaUpHYjNKblpWSnZZMnNpTENKemIyWjBkMkZ5WlY5cWQydHpYMlZ1WkhCdmFXNTBJam9pYUhSMGNITTZYQzljTDNObGNuWnBZMlV1WkdseVpXTjBiM0o1TG05aUxtWnZjbWRsY205amF5NW1hVzVoYm1OcFlXdzZORFF6WEM5aGNHbGNMM052Wm5SM1lYSmxMWE4wWVhSbGJXVnVkRnd2TldNNU16WXpZelF3TTJZd1pHWXdNREZrTTJFeVpEWTVYQzloY0hCc2FXTmhkR2x2Ymx3dmFuZHJYM1Z5YVNJc0luTnZablIzWVhKbFgybGtJam9pTldNNU16WXpZelF3TTJZd1pHWXdNREZrTTJFeVpEWTVJaXdpYjNKblgyTnZiblJoWTNSeklqcGJYU3dpYjJKZmNtVm5hWE4wY25sZmRHOXpJam9pYUhSMGNITTZYQzljTDJScGNtVmpkRzl5ZVM1dllpNW1iM0puWlhKdlkyc3VabWx1WVc1amFXRnNPalEwTTF3dmRHOXpYQzhpTENKdmNtZGZhV1FpT2lJMVl6WXhNMlpoTmpnNE5qRXdaVEF3TXpWaVpESTVPV1FpTENKemIyWjBkMkZ5WlY5cWQydHpYM0psZG05clpXUmZaVzVrY0c5cGJuUWlPaUpVVDBSUElpd2ljMjltZEhkaGNtVmZjbTlzWlhNaU9sc2lVRWxUVUNJc0lrRkpVMUFpTENKRFFsQkpTU0lzSWtSQlZFRWlYU3dpWlhod0lqb3hOVFV6TnpjMk5UVXdMQ0p2Y21kZmJtRnRaU0k2SW1SaGJtbGxiQzVqYjIxaGJpSXNJbTl5WjE5cWQydHpYM0psZG05clpXUmZaVzVrY0c5cGJuUWlPaUpVVDBSUElpd2lhV0YwSWpveE5UVXpNVGN4TnpVd0xDSnFkR2tpT2lJNU1UUmlaV0kwTWkwME56QTVMVFEyWXpZdFlqWTRZeTFqTm1Ka056UTJNVFV3TXpjaWZRLks2TnFsS0c2WGRkaE9fZzlXWVBTS0REMW5GOUU5NDFPME1xRmowZ0FTd3VKV01FVXFwRm1hYW1mNFZRdlhibG0tTlhtaEFLbFg1eU40Vjl0aEtzSW1zSnN3MmJTRU42NEYtNzBTMEIyTnZZOWxFTFZELWlDWktoYUlLajBmSmpSbXM5TjhjREdidy1YSVlTRDRsdm56UUhfMjlfTDc3Z09WQ3BkenJmeld3UE9iY0VzSTBOeWYyOEtLMy1rdjh6VGtPMVprLWd5TFFxaDNqeDFrWjdUT0dNSFUtVk0zcDVnejROWXMtQ2c0YktScmR6WXJJQW93bjNXb1AtaHFhUEFZWDg2SWNpZTd0UWV4anZtZmM3MjRwWmpHMUtrem04MnUyZzNBbHpYRDJHb1FQMDhxdzNtWElLWE1Od2F0OFFmbHdtdmZvRDRRbGcwX3d3SlA0T3YyUSIsInNjb3BlIjoib3BlbmlkIGFjY291bnRzIHBheW1lbnRzIGR5bmFtaWNfY2xpZW50X3JlZ2lzdHJhdGlvbiIsInJlcXVlc3Rfb2JqZWN0X3NpZ25pbmdfYWxnIjoiUlMyNTYiLCJleHAiOjE1NTMxNzIwNTUsInJlcXVlc3Rfb2JqZWN0X2VuY3J5cHRpb25fZW5jIjoiQTEyOENCQy1IUzI1NiIsImlhdCI6MTU1MzE3MTc1MywianRpIjoiMjJhMWYwMjktMTY2Yi00NTQ3LTk1MTItYjMyYzAzNjU3Yjk1IiwicmVzcG9uc2VfdHlwZXMiOlsiY29kZSBpZF90b2tlbiJdLCJpZF90b2tlbl9zaWduZWRfcmVzcG9uc2VfYWxnIjoiUlMyNTYifQ";
	// Signature
	private static byte[] jwtSignature = base64Url.decode(
			"CG82ofUqrJg_aSLLzeRZ2Jent4PM0yLtjRfUglqIJywwEzTLanYObtDRQBw0m2ZlMurTr832B520SdjVN4BzqLjnDjg43FYUh7v3T8dNHRvXKGtJ4Wigbnp0BnFeooko4_5HNT-WSzME9xUDsfgF2EY-HrChlIvicIFbrg42idftBjc3zZYO830nS6uoAViofade5WwMGW9PgGS_HY6QrAsEz_DCMxRF-vC1zFqYnxrOzZXOVA8OVrKuFCWIHqkug0mmDHuHvkz4T1ReYzcnG4NfSu7MLRty-nKMNGoKVRRR1Ys3ihjhDtQHXY0OYyZ7E8e2edWafChg4HprwWc8JA"
					.getBytes());

	// Certificate
	private static byte[] decoded = base64Url.decode(
			("MIIFZjCCBE6gAwIBAgIUUzG4IfVidW2IEwdZMid7lOXTEmYwDQYJKoZIhvcNAQELBQAwezELMAkGA1UEBhMCVUsxDTALBgNVBAgTBEF2b24xEDAOBgNVBAcTB0JyaXN0b2wxEjAQBgNVBAoTCUZvcmdlUm9jazEcMBoGA1UECxMTZm9yZ2Vyb2NrLmZpbmFuY2lhbDEZMBcGA1UEAxMQb2JyaS1leHRlcm5hbC1jYTAgFw0xODAzMTgwNDQzNDBaGA8yMTE5MDIyMjA0NDM0MFowgbExITAfBgNVBAMMGDVjOTM2M2M0MDNmMGRmMDAxZDNhMmQ2OTEhMB8GA1UECwwYNWM2MTNmYTY4ODYxMGUwMDM1YmQyOTlkMRIwEAYDVQQKDAlGb3JnZVJvY2sxEDAOBgNVBAcMB0JyaXN0b2wxDTALBgNVBAgMBEF2b24xCzAJBgNVBAYTAlVLMScwJQYDVQRhDB5QU0RHQi01YzYxM2ZhNjg4NjEwZTAwMzViZDI5OWQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC9f+nl1FWiJAMCFwVanlhl6eUDxKLV7O7jitnGIUrHqkWKzBE187snXgfINi9Ye1XbqBER3ofPv1YDe+Ht9AUaA2+ea1TueynmfIY1mt+dK1AR4ijsoawKMmSbQcAbd7nn4HxP3wmG5BtYjpG0CTxCNF0wD66CjDwY4ZmcNPDChD16nXtQftsDJgNBBx4Cp+UU8jEqlN+pFRd9/0I0efoCpIYAcS2XqbCIQln0vQYAGQSAs5qhfhNAfVoqMbpfU6KztmVmm/7m2l1VenQmz5YbdXG61v7FDQkHkctPD/hUgQ9joRIPP05DnBYt2WVqjKa+aSxL1iJDZdfAtBFJUEC5AgMBAAGjggGnMIIBozCBygYIKwYBBQUHAQEEgb0wgbowWwYIKwYBBQUHMAKGT2h0dHBzOi8vc2VydmljZS5kaXJlY3Rvcnkub2IuZm9yZ2Vyb2NrLmZpbmFuY2lhbDo0NDMvYXBpL2RpcmVjdG9yeS9rZXlzL2p3a191cmkwWwYIKwYBBQUHMAGGT2h0dHBzOi8vc2VydmljZS5kaXJlY3Rvcnkub2IuZm9yZ2Vyb2NrLmZpbmFuY2lhbDo0NDMvYXBpL2RpcmVjdG9yeS9rZXlzL2p3a191cmkwgdMGCCsGAQUFBwEDBIHGMIHDMAgGBgQAjkYBATAJBgcEAI5GAQYDMAkGBwQAi+xJAQIwgaAGBgQAgZgnAjCBlTBqMCkGBwQAgZgnAQQMHkNhcmQgQmFzZWQgUGF5bWVudCBJbnN0cnVtZW50czAeBgcEAIGYJwEDDBNBY2NvdW50IEluZm9ybWF0aW9uMB0GBwQAgZgnAQIMElBheW1lbnQgSW5pdGlhdGlvbgwdRm9yZ2VSb2NrIEZpbmFuY2lhbCBBdXRob3JpdHkMCEZSLUFBQUFBMA0GCSqGSIb3DQEBCwUAA4IBAQB7U8NXrRJ3Y2AT+SihpM4c/FFHoR8IxM47Gqb4+12GSqNbkcNLzAqzlJnKHrQTtxZjCnjRbbs8jIE3F5dmYNQ91LFXVngV1uIKxnqpB68kY33Jvx4WlzlnKkjLWq1osKZRiXEZ9PYPoxzjfMLPQ/Hsa1mxYKbqb+dLD4EnG7DRblQjKLbziGvyabJMFPzvLRUh245AtG5oAQ2mYN03ehFjtS4aHZWtT55hYIf2e6s5CI3RxfSslWBXwxeGcU7ecEwt+bYYeeLczGOfKKcXmjQBP1UTrn4IsM0vuMgoZ2KQYxfnAKLAMYc4Tn/1nGaMwykhLNpdyA+Iy0XL63zKOHs0")
					.getBytes());

	private static boolean isValid() {
		
		System.out.println("asdaa: " + Algorithms.RS256.toString());
		System.out.println("====================================================");
		printSecurityProviderAlgorithms();
		System.out.println("====================================================");

		String algorithm = "PS256";
		JwsAlgorithm jwsAlgorithm = JwsAlgorithm.parseAlgorithm(algorithm);
		if (jwsAlgorithm != null) {
			System.out.println("Parsed algorithm: " + jwsAlgorithm.getAlgorithm());
		}
		System.out.println("====================================================");

		Signature signature = null;
		PSSParameterSpec pssSpec = getSaltParameter(jwsAlgorithm.getAlgorithm());

		try {
			signature = Signature.getInstance(jwsAlgorithm.getAlgorithm());
			signature.setParameter(pssSpec);
		} catch (NoSuchAlgorithmException e1) {
			e1.printStackTrace();
		} catch (InvalidAlgorithmParameterException e) {
			e.printStackTrace();
		}

		if (jwtAssertion != null && jwtSignature != null) {
			try {
				CertificateFactory cf = CertificateFactory.getInstance("X.509");
				Certificate certificate = cf.generateCertificate(new ByteArrayInputStream(decoded));
				signature.initVerify(certificate);
				signature.update(jwtAssertion.getBytes());
				return signature.verify(jwtSignature);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Signature is null");
		}
		return false;

	}

	public static void main(String[] args) {
		System.out.println("Valid: " + isValid());
	}

	private static void printSecurityProviderAlgorithms() {
		TreeSet<String> algorithms = new TreeSet<>();
		for (Provider provider : Security.getProviders())
			for (Service service : provider.getServices())
				if (service.getType().equals("Signature"))
					algorithms.add(service.getAlgorithm());
		for (String algorithm : algorithms)
			System.out.println(algorithm);
	}

	private static PSSParameterSpec getSaltParameter(String algorithm) {
		if (algorithm != null) {
			switch (algorithm) {
			case "SHA256WithRSAAndMGF1":
				return new PSSParameterSpec("SHA256", "MGF1", MGF1ParameterSpec.SHA256, 32, 1);
			case "SHA384WithRSAAndMGF1":
				return new PSSParameterSpec("SHA384", "MGF1", MGF1ParameterSpec.SHA384, 48, 1);
			case "SHA512WithRSAAndMGF1":
				return new PSSParameterSpec("SHA512", "MGF1", MGF1ParameterSpec.SHA512, 64, 1);
			}
		}
		return null;
	}
}