{
  "_copyright" : "Copyright 2019 ForgeRock AS Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions andlimitations under the License.",
  "name" : "OBIE Assets OpenAM Token Route",
  "baseURI" : "https://login.psd2acceldemo.fridam.aeet-forgerock.com",
  "condition" : "${matches(request.uri.path, '^/oauth2/realms/root/realms/openbanking/access_token')}",
  "capture" : [ "response", "request" ],
  "auditService" : {
    "name" : "openbanking-audit-service",
    "type" : "AuditService",
    "config" : {
      "enabled" : true,
      "event-handlers" : [ {
        "class" : "org.forgerock.audit.handlers.json.JsonAuditEventHandler",
        "config" : {
          "name" : "openbanking-event",
          "logDirectory" : "${openig.baseDirectory.path}/audit/openbanking",
          "elasticsearchCompatible" : true,
          "topics" : [ "access" ],
          "buffering" : {
            "enabled" : false,
            "maxSize" : 10000,
            "writeInterval" : "250 millis",
            "maxBatchedEvents" : 500
          },
          "fileRotation" : {
            "rotationEnabled" : true,
            "rotationInterval" : "24 h",
            "rotationFileSuffix" : "_yyyy-MM-dd",
            "rotationTimes" : [ "1 m" ]
          },
          "fileRetention" : {
            "maxNumberOfHistoryFiles" : 365
          },
          "rotationRetentionCheckInterval" : "1 m"
        }
      } ]
    }
  },
  "heap" : [ {
    "name" : "ReverseProxyHandler",
    "type" : "ReverseProxyHandler",
    "capture" : [ "response", "request" ]
  }, {
    "name" : "capture",
    "type" : "CaptureDecorator",
    "config" : {
      "captureEntity" : true,
      "captureContext" : true
    }
  }, {
    "name" : "ForgeRockClientHandler",
    "type" : "Chain",
    "config" : {
      "filters" : [ "TransactionIdOutboundFilter" ],
      "handler" : "ClientHandler"
    },
    "capture" : [ "response", "request" ]
  } ],
  "handler" : {
    "type" : "Chain",
    "config" : {
      "filters" : [ {
        "name" : "HeaderFilter-AddResponseHeaders",
        "type" : "HeaderFilter",
        "config" : {
          "messageType" : "RESPONSE",
          "remove" : [ "Location", "Set-Cookie", "Server", "Strict-Transport-Security" ],
          "add" : {
            "Content-Type" : [ "application/json" ]
          }
        }
      }, {
        "name" : "ErrorResponseSwitch",
        "type" : "SwitchFilter",
        "config" : {
          "onResponse" : [ {
            "condition" : "${(response.status.code == 400) && (toString(response.entity).contains('invalid_grant'))}",
            "handler" : {
              "name" : "FilterFailureHandler-400-InvalidGrant",
              "type" : "StaticResponseHandler",
              "config" : {
                "status" : 400,
                "reason" : "invalid_grant",
                "entity" : "${attributes.error400invalidGrant}"
              }
            }
          }, {
            "condition" : "${(response.status.code == 400) && (!toString(response.entity).contains('invalid_grant'))}",
            "handler" : {
              "name" : "FilterFailureHandler-401-InvalidClient",
              "type" : "StaticResponseHandler",
              "config" : {
                "status" : 401,
                "reason" : "invalid_client",
                "entity" : "${attributes.error401invalidClient}"
              }
            }
          }, {
            "condition" : "${response.status.code == 401}",
            "handler" : {
              "name" : "FilterFailureHandler-401",
              "type" : "StaticResponseHandler",
              "config" : {
                "status" : 401,
                "reason" : "Unauthorized",
                "entity" : "${attributes.error401invalidClient}"
              }
            }
          }, {
            "condition" : "${response.status.code == 403}",
            "handler" : {
              "name" : "FilterFailureHandler-403",
              "type" : "StaticResponseHandler",
              "config" : {
                "status" : 403,
                "reason" : "Forbidden",
                "entity" : "${attributes.error403}"
              }
            }
          }, {
            "condition" : "${response.status.code == 404}",
            "handler" : {
              "name" : "FilterFailureHandler-404",
              "type" : "StaticResponseHandler",
              "config" : {
                "status" : 404,
                "reason" : "Not Found",
                "entity" : "${attributes.error404}"
              }
            }
          }, {
            "condition" : "${response.status.code == 500}",
            "handler" : {
              "name" : "FilterFailureHandler-500",
              "type" : "StaticResponseHandler",
              "config" : {
                "status" : 500,
                "reason" : "Internal Server Error",
                "entity" : "${attributes.error500}"
              }
            }
          } ]
        }
      }, {
        "name" : "AssignmentFilter-ErrorHandling",
        "type" : "AssignmentFilter",
        "config" : {
          "onResponse" : [ {
            "target" : "${attributes.error400invalidGrant}",
            "value" : "${toString('{\"status\":\"400\",\"error\":\"invalid_grant\",\"message\":\"invalid_grant\",\"path\":\"').concat(request.uri.path).concat('\"}')}"
          }, {
            "target" : "${attributes.error401invalidClient}",
            "value" : "${toString('{\"status\":\"401\",\"error\":\"invalid_client\",\"message\":\"invalid_client\",\"path\":\"').concat(request.uri.path).concat('\"}')}"
          }, {
            "target" : "${attributes.error401}",
            "value" : "${toString('{\"status\":\"401\",\"error\":\"Unauthorized\",\"message\":\"Unauthorized\",\"path\":\"').concat(request.uri.path).concat('\"}')}"
          }, {
            "target" : "${attributes.error403}",
            "value" : "${toString('{\"status\":\"403\",\"error\":\"Forbidden\",\"message\":\"Forbidden\",\"path\":\"').concat(request.uri.path).concat('\"}')}"
          }, {
            "target" : "${attributes.error404}",
            "value" : "${toString('{\"Code\":\"404 Not Found\",\"Id\":\"').concat(request.headers['x-request-id'][0]).concat('\",\"Message\":\"Resource Not Found.\",\"Errors\":[{\"ErrorCode\":\"UK.OBIE.NotFound\",\"Message\":\"Not Found.\",\"Path\":\"\",\"Url\":\"').concat(request.uri.path).concat('\"}]}')}"
          }, {
            "target" : "${attributes.error500}",
            "value" : "${toString('{\"Code\":\"500 Internal Server Error\",\"Id\":\"').concat(request.headers['x-request-id'][0]).concat('\",\"Message\":\"Internal Server Error.\",\"Errors\":[{\"ErrorCode\":\"UK.OBIE.UnexpectedError\",\"Message\":\"Unexpected Error.\",\"Path\":\"\",\"Url\":\"').concat(request.uri.path).concat('\"}]}')}"
          } ]
        }
      }, {
        "name" : "CertificateExtensionValidatorFilter",
        "type" : "CertificateExtensionValidatorFilter",
        "config" : {
          "routeRole" : "Account Information,Payment Initiation",
          "clientCertificateHeaderName" : "ssl-client-cert"
        }
      }, {
        "name" : "HeaderFilter-Rewrite-Host",
        "type" : "HeaderFilter",
        "config" : {
          "messageType" : "REQUEST",
          "remove" : [ "host", "x-forwarded-host" ],
          "add" : {
            "host" : [ "login.psd2acceldemo.fridam.aeet-forgerock.com" ],
            "x-forwarded-host" : [ "login.psd2acceldemo.fridam.aeet-forgerock.com" ]
          }
        }
      }, {
        "name" : "HeaderFilter-Remove-Header",
        "type" : "HeaderFilter",
        "config" : {
          "messageType" : "REQUEST",
          "remove" : [ "ssl-client-cert" ]
        }
      } ],
      "handler" : "ReverseProxyHandler"
    }
  }
}