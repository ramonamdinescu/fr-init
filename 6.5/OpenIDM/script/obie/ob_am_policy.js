/***************************************************************************
 *  Copyright 2019 ForgeRock AS.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ***************************************************************************/
load("/git/config/6.5/default/idm/sync-with-ldap-bidirectional/script/obie/ob_utils.js");
load("/git/config/6.5/default/idm/sync-with-ldap-bidirectional/script/obie/config.js");
 
function constructPISPPolicyData(paymentIntentID, inputSub, inputPaymentInitiation, tpp){
	
	var policyData = {};
	var permission = "";
	
	policyData.name = "pisp-" + paymentIntentID;
	console.log("policyData.name: " + policyData.name);
	
	policyData.active = true;
	policyData.description = "OB PISP Consent Policy - autogenerated by IDM";
	policyData.applicationName = "PISP Authorization Policy";
	policyData.actionValues = {};
	
	policyData.actionValues["POST"] = true;
	policyData.actionValues["GET"] = true;
	
	var res1 = constructRSUri(rsServer) + "/openbanking/v3.1/domestic-payment-consents/" + paymentIntentID;	
	policyData.resources = [res1];

	var inputPaymentInitiationTrim = (inputPaymentInitiation + "").replace(/\s+/g, '');

	var hashPaymentBody = sha256(inputPaymentInitiationTrim);

	console.log("[DEBUG] Payment Body STRING: "+ inputPaymentInitiationTrim);
	console.log("[DEBUG] Payment Body HASH: "+ hashPaymentBody);

	if (inputSub != null && inputSub != "" && inputPaymentInitiation != null && inputPaymentInitiation != "") {
                    policyData.subject = {
                                "type": "AND",
                                "subjects":     [
                                        { 
						"type": "JwtClaim",
                                          	"claimName": "sub",
                                          	"claimValue": inputSub
                                        },
					{
                                                "type": "JwtClaim",
                                                "claimName": "tpp",
                                                "claimValue": tpp
                                        },
					{
				                "type": "OR",
                				"subjects": [
                   					 {
                        					"type": "JwtClaim",
                        					"claimName": "Initiation",
                        					"claimValue": hashPaymentBody
                    					},
                    					{
                        					"type": "JwtClaim",
                        					"claimName": "Initiation",
                        					"claimValue": "funds-confirmation"
                    					}
            		    			]
            				}

                                ]
                };
	}
	policyData.resourceTypeUuid = CONFIG_policy.pispResourceTypeUuid;

	console.log("AM PISP Policy Created: " + policyData.name);
	
	return policyData;
}


function constructAISPPolicyData(accountInformationIntentID, inputSub, inputAccountInitiation, tpp){
	
	var policyData = {};
	var permission = "";
	
	policyData.name = "aisp-" + accountInformationIntentID;
	console.log("policyData.name: " + policyData.name);
	
	policyData.active = true;
	policyData.description = "OB AISP Consent Policy - autogenerated by IDM";
	policyData.applicationName = "AISP Authorization Policy";
	policyData.actionValues = {};
	
	policyData.actionValues["POST"] = true;
	policyData.actionValues["GET"] = true;	

	var res1 = constructRSUri(rsServer) + "/openbanking/v3.1/accounts/" + accountInformationIntentID;	
	policyData.resources = [res1];

	if (inputSub != null && inputSub != "" && inputAccountInitiation != null && inputAccountInitiation != "") {

		var subjectList = [];
		var accountsList = [];
		var i;
		for (i=0; i < inputAccountInitiation.length; i++){
			var currentAccountId = inputAccountInitiation[i].accountid;
			accountsList.push(currentAccountId);
			var currentPermissions = inputAccountInitiation[i].Permissions;
			var j;
			for (j=0; j < currentPermissions.length; j++){
				var currentPermission = currentPermissions[j];
				
				var currentSubject = {}; 
				currentSubject.type = "JwtClaim";
				currentSubject.claimName = "PermissionType";
				currentSubject.claimValue = currentAccountId+":"+currentPermission;
				subjectList.push(currentSubject);
			}						
		}
		var allGrantedAccounts = {};
                allGrantedAccounts.type = "JwtClaim";
                allGrantedAccounts.claimName = "PermissionType";
                allGrantedAccounts.claimValue = "allGrantedAccounts";
                subjectList.push(allGrantedAccounts);

		policyData.subject = {
				"type": "AND",
				"subjects":	[
					{ "type": "JwtClaim",
					  "claimName": "sub",
					  "claimValue": inputSub
					},
					{ "type": "JwtClaim",
                                          "claimName": "tpp",
                                          "claimValue": tpp
                                        },
					{
				          "type": "OR",
				          "subjects": subjectList
					}
				]
		};
	}
	
	policyData.resourceAttributes = [ 
			  { "type": "Static",
             	 	    "propertyName": "grantedAccounts",
			    "propertyValues": accountsList
			  }];

	policyData.resourceTypeUuid = CONFIG_policy.aispResourceTypeUuid;   

	console.log("AM AISP Policy Created: " + policyData.name);
	
	return policyData;
}


function constructIdmUri(idmServer){
	var uri = "";
	
	uri = idmServer.protocol + "://" + idmServer.host
	
	return uri;
}

function constructRSUri(rsServer){
        var uri = "";

        uri = rsServer.protocol + "://" + rsServer.host + ":" + rsServer.port

        return uri;
}
